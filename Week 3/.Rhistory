# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Load package tidyverse
library(tidyverse)
# Example a.: execute this example
x <- 'A'
x
# Complete the code for Example b and execute it
x <- 'Apple'
x
# Complete the code for Example c and execute it
x <- FALSE
x
# Complete the code for Example e and execute it
x <- 5
x
# Complete the code for Example f and execute it
x <- 1i
x
# Example a.: execute this example
x <- 'A'
typeof(x)
# Complete the code for Example b and execute it
x <- "Apple"
typeof(x)
# Complete the code for Example c and execute it
x <- FALSE
typeof(x)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Get more information about the mean() command using ? operator
?mean()
# Convert the variable number_of_cats using as.integer()
mean(as.integer(cat_lovers$number_of_cats))
# Display the elements of the column number_of_cats
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.integer(cat_lovers$number_of_cats)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
typeof(x)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x<-1:5
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1.787,0.63573,2.3890)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Create a vector
x <- c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,'a')
# Check the type of x
typeof(x)
# Create a vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting categoric variables
loans <- loans_full_schema %>%
select(grade,state,homeownership,disbursement_method) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
install.packages("openintro")
knitr::opts_chunk$set(echo = TRUE)
# Method 3
x<-c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Install package
install.packages("openintro", repos="http://cran.us.r-project.org")
# Load the package
library(openintro)
# Load package
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
x<-c(25L,30L,22L,28L,33L)
print(x)
# Enter code here
student_info <- c(student_info,'Alice','Bob','Catherine')
# Enter code here
student_infolist(name="Alice","Bob","Catherine", score = 85,92,78, passedexams = TRUE,TRUE,FALSE)
# Enter code here
student_infolist(name="Alice","Bob","Catherine", score = 85,92,78, passedexams = TRUE,TRUE,FALSE)
# Enter code here
student_info=list(name="Alice","Bob","Catherine", score = 85,92,78, passedexams = TRUE,TRUE,FALSE)
print(student_infolist)
# Enter code here
student_info = list(name="Alice","Bob","Catherine", score = 85,92,78, passedexams = TRUE,TRUE,FALSE)
print(student_info)
# Enter code here
names(data)
# Enter code here
a<-c(10)
# Enter code here
a<-c(10)
# Enter code here
a<-c(10)
typeof(a)
# Enter code here
a<-c(10)
typeof(a)
b<-c(15.5)
typeof(b)
c<-c("20")
typeof(c)
d<-d(TRUE)
# Enter code here
a<-c(10)
typeof(a)
b<-c(15.5)
typeof(b)
c<-c("20")
typeof(c)
d<-c(TRUE)
typeof(d)
# Enter code here
x <- as.numeric("25")
# Enter code here
x <- as.numeric("25")
# Enter code here
"25" <- as.numeric("25")
# Enter code here
"25"<-as.numeric("25")
# Enter code here
"25"<-as.numeric("25")
typeof("25")
# Enter code here
x<-as.numeric("25")
typeof(x)
# Enter code here
x<-as.numeric("25")
typeof(x)
prices<-c(20.5,15,x)
print(prices)
# Enter code here
student_info = list(name=c("Alice","Bob","Catherine"), score=c(85,92,78), passedexams=c(TRUE,TRUE,FALSE))
print(student_info)
# Enter code here
x<-c(5,10,15)
y<-c("apple","banana","cherry",x)
typeof(y)
# Enter code here
numbers=as.numeric(7,12.5,"15.7")
sumofnumbers=sum(numbers)
# Enter code here
numbers=as.numeric(7,12.5,"15.7")
sumofnumbers=sum(numbers)
# Enter code here
numbers<-as.numeric(7,12.5,"15.7")
sumofnumbers<-sum(numbers)
print(sumofnumbers)
# Enter code here
x<-c(7,12.5)
y<-as.double("15.7")
numbers<-c(x,y)
sum(numbers)
# Enter code here
y<-c(85,90.5)
x<-as.numeric("75.2")
newvector<-c(y,x)
# Enter code here
y<-c(85,90.5)
x<-as.numeric("75.2")
newvector<-c(y,x)
print(newvector)
# Enter code here
y<-c(85,90.5)
x<-as.numeric("75.2")
newvector<-c(y,x)
print(newvector)
mean(newvector)
# Enter code here
y<-c(85,90.5)
x<-as.numeric("75.2")
newvector<-c(y,x)
print(newvector)
mean(newvector)
# Enter code here
y<-c(85,90.5)
x<-as.numeric("75.2")
newvector<-c(y,x)
mean(newvector)
# Enter code here
mixed_data=list(num<-c(10,20,30),char<-c("red","green", "blue"),logi<-C(TRUE,FALSE,TRUE))
# Enter code here
mixed_data=list(num<-c(10,20,30),char<-c("red","green", "blue"),logi<-c(TRUE,FALSE,TRUE))
mean(mixed-data)
# Enter code here
mixed_data=list(num<-c(10,20,30),char<-c("red","green", "blue"),logi<-c(TRUE,FALSE,TRUE))
mean(mixed_data)
# Enter code here
mixed_data=list(num<-c(10,20,30),char<-c("red","green", "blue"),logi<-c(TRUE,FALSE,TRUE))
print(mixed_data)
mean(mixed_data)
# Enter code here
mixed_data=list(num=c(10,20,30),char=c("red","green", "blue"),logi=c(TRUE,FALSE,TRUE))
print(mixed_data)
mean(mixed_data)
# Enter code here
mixed_data=list(num=c(10,20,30),char=c("red","green", "blue"),logi=c(TRUE,FALSE,TRUE))
print(mixed_data)
mixed_data$num
mean(num)
# Enter code here
mixed_data=list(num=c(10,20,30),char=c("red","green", "blue"),logi=c(TRUE,FALSE,TRUE))
mixed_data$num
mean(num)
# Enter code here
student_info$"bob"
# Enter code here
student_info$name
# Enter code here
student_info$name$"Bob"
# Enter code here
student_info$name
# Enter code here
student_info$score[2]
# Enter code here
student_info$score[student_info$name=="Bob"]
# Enter code here
x<-c(3,4,5)
length(x)
x
# Enter code here
x<-c(3,4,5)
x[length(x)]
# Enter code here
x<-c(30,45,21,46)
x[x<30]
# Enter code here
x<-c(30,45,21,46)
x[x>30]
# Enter code here
x<-c(1:20)
x[1:20:3]
# Enter code here
x<-c(1:20)
x[1:20:3]
x <- 1:20
x[1:5:2]
# Enter code here
x<-c(1:20)
print(x[seq(1, 20, 3)]
# Enter code here
x<-c(1:20).
# Enter code here
x<-c(1:20)
print(x[seq(1, 20, 3)])
# Enter code here
x<-c(1:10)
print(x[seq(4, 8)])
# Enter code here
x<- c(10, NA, 15, 20)
print(x[seq(2)])
# Enter code here
x<- c(10, NA, 15, 20)
print(x[2])
# Enter code here
x<-c(90,100,81,102)
x[x>90]
y<-c(x)
sum(y)
?nchar
# Enter code here
x<-c("banana","pineapple","apple")
nchar(x)
# Enter code here
x<-c("banana","pineapple","apple")
nchar(x)
x[x>6]
# Enter code here
x<-c("banana","pineapple","apple")
nchar(x)
x[x>6]
print(x)
# Enter code here
y<-c(5,6,7,10)
y[y%%5==0]
print(y)
# Enter code here
y<-c(5,6,7,10)
y[y%%5==0]
# Enter code here
x<-c(12,14,15,17)
y<-c(14,15,14,18)
y[x<y==TRUE]
# Enter code here
x<-c(12,14,15,17)
y<-c(14,15,14,18)
y[x<y]
# Enter code here
x<-c("banana","pineapple","apple")
long_names[nchar(x)>6]
# Enter code here
x<-c("banana","pineapple","apple")
long_names<-x[nchar(x)>6]
print(long_names)
# Enter code here
x<-c(12,14,15,17)
y<-c(14,15,14,18)
y>x
# Enter code here
x<-c(12,14,15,17)
y<-c(14,15,14,18)
x>y
# Enter code here
mixed_data=list(numb=c(10,20,30),char=c("red","green", "blue"),logi=c(TRUE,FALSE,TRUE))
mixed_data$numb
mean(numb)
# Enter code here
mixed_data=list(numb=c(10,20,30),char=c("red","green", "blue"),logi=c(TRUE,FALSE,TRUE))
mixed_data$numb
mean(mixed_data$numb)
# Enter code here
x<-c(90,100,81,102)
x<-temp>90
# Enter code here
temp<-c(90,100,81,102)
x<-temp>90
x
# Enter code here
temp<-c(90,100,81,102)
x<-temp>90
sum(x)
setwd("C:/Users/65971/OneDrive - National University of Singapore/NM2207/Week 4")
